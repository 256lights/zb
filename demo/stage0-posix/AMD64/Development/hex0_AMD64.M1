# SPDX-FileCopyrightText: 2017 Jeremiah Orians <jeremiah@pdp10.guru>
# SPDX-FileCopyrightText: 2023 Andrius Å tikonas <andrius@stikonas.eu>
#
# SPDX-License-Identifier: GPL-3.0-or-later

DEFINE add_eax,ebp 01E8
DEFINE call E8
DEFINE cmp_al, 3C
DEFINE dec_ebx FFCB
DEFINE je 74
DEFINE jge 7D
DEFINE jl 7C
DEFINE jmp EB
DEFINE jne 75
DEFINE mov_dx, 66BA
DEFINE mov_si, 66BE
DEFINE mov_ebp,eax 89C5
DEFINE mov_rdi,r9 4C89CF
DEFINE mov_rdi,r10 4C89D7
DEFINE mov_rsi,rsp 4889E6
DEFINE mov_r9,rax 4989C1
DEFINE mov_r10,rax 4989C2
DEFINE pop_rax 58
DEFINE pop_rbx 5B
DEFINE pop_rdi 5F
DEFINE pop_rdx 5A
DEFINE push 6A
DEFINE push_rax 50
DEFINE push_rbp 55
DEFINE push_rbx 53
DEFINE ret C3
DEFINE shl_ebp, C1E5
DEFINE sub_al, 2C
DEFINE syscall 0F05
DEFINE test_eax,eax 85C0
DEFINE test_ebx,ebx 85DB
DEFINE xor_eax,eax 31C0
DEFINE xor_ebx,ebx 31DB
DEFINE xor_ebp,ebp 31ED
DEFINE xor_edi,edi 31FF
DEFINE xor_esi,esi 31F6

# Where the ELF Header is going to hit
# Simply jump to _start
# Our main function
:_start
	pop_rax                     # Get the number of arguments
	pop_rdi                     # Get the program name
	pop_rdi                     # Get the actual input name
	xor_esi,esi                 # prepare read_only, rsi = 0
	push !2                     # prepare syscall number
	pop_rax                     # the syscall number for open()
	syscall                     # Now open that damn file
	mov_r9,rax                  # Preserve the file pointer we were given

	pop_rdi                     # Get the actual output name
	mov_si, @577                # Prepare file as O_WRONLY|O_CREAT|O_TRUNC
	mov_dx, @448                # Prepare file as RWX for owner only (700 in octal)
	push !2                     # prepare syscall number
	pop_rax                     # the syscall number for open()
	syscall                     # Now open that damn file
	mov_r10,rax                 # Preserve the file pointer we were given

	# Our flag for byte processing
	push !-1
	pop_rbx                     # rbx = -1

	# temp storage for the sum
	xor_ebp,ebp                 # rbp = 0

:loop
	# Read a byte
	call %read_byte

	# process byte
	call %hex

	# deal with -1 values
	test_eax,eax
	jl !loop

	# deal with toggle
	test_ebx,ebx                # jump if rbx >= 0
	jge !print

	# process first byte of pair
	mov_ebp,eax
	xor_ebx,ebx                 # rbx = 0
	jmp !loop

# process second byte of pair
:print
	# update the sum and store in output
	shl_ebp, !4
	add_eax,ebp

	# flip the toggle
	dec_ebx                     # rbx = -1

	call %write_byte

	jmp !loop

:hex
	# Purge Comment Lines (#)
	cmp_al, !35
	je !purge_comment

	# Purge Comment Lines (;)
	cmp_al, !59
	je !purge_comment

	# deal all ascii less than '0'
	cmp_al, !48
	jl !ascii_other

	# deal with 0-9
	cmp_al, !58
	jl !ascii_num

	# deal with all ascii less than 'A'
	cmp_al, !65
	jl !ascii_other

	# deal with 'A'-'F'
	cmp_al, !71
	jl !ascii_high

	# deal with all ascii less than 'a'
	cmp_al, !97
	jl !ascii_other

	#deal with 'a'-'f'
	cmp_al, !103
	jl !ascii_low

	# The rest that remains needs to be ignored
	jmp !ascii_other

:purge_comment
	# Read a byte
	call %read_byte

	# Loop if not LF
	cmp_al, !10
	jne !purge_comment

	# Otherwise return -1

:ascii_other
	push !-1
	pop_rax                     # return = -1
	ret

:ascii_num
	sub_al, !48
	ret

:ascii_low
	sub_al, !32                # convert to uppercase

:ascii_high
	sub_al, !55
	ret

# Writes byte stored in al
:write_byte
	# Print our Hex
	push !1                     # prepare to set rdx to 1
	pop_rdx                     # set the size of chars we want
	push_rax                    # Move output to stack
	mov_rsi,rsp                 # What we are writing
	mov_rdi,r10                 # Where are we writing to
	push !1                     # prepare syscall number for write
	pop_rax                     # get the syscall number for write
	syscall                     # call the Kernel
	pop_rdi                     # deallocate stack
	ret

:read_byte
	# Attempt to read 1 byte from STDIN
	push !1                     # prepare to set rdx to 1
	pop_rdx                     # set the size of chars we want
	push_rbp                    # allocate stack
	mov_rsi,rsp                 # Where to put it
	mov_rdi,r9                  # Where are we reading from
	xor_eax,eax                 # the syscall number for read, rax = 0
	syscall                     # call the Kernel

	test_eax,eax                # check what we got
	je !Done                    # Got EOF call it done

	# load byte
	pop_rax                     # load char
	ret

:Done
	# program completed Successfully
	xor_edi,edi                 # All is well, rdi = 0
	push !60                    # syscall number for exit is 60
	pop_rax                     # put the exit syscall number in rax
	syscall                     # Call it a good day

:ELF_end

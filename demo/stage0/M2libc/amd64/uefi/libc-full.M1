## Copyright (C) 2022 Andrius Å tikonas
## This file is part of M2-Planet.
##
## M2-Planet is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## M2-Planet is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with M2-Planet.  If not, see <http://www.gnu.org/licenses/>.

:_start
	push_rbp
	push_rbx
	push_rdi
	push_rsi
	push_r12
	push_r13
	push_r14
	push_r15
	mov_rbp,rsp                                    # save stack pointer

	mov_[rip+DWORD],rsp %__return_address          # save UEFI return address
	mov_[rip+DWORD],rcx %GLOBAL__image_handle      # save image_handle
	mov_[rip+DWORD],rdx %GLOBAL__system            # save system

	;; Do UEFI initialization
	call %FUNCTION__init
	call %exit_uefi_stack                          # Switch to user stack

	;; Perform the main loop
	mov_rax,[rip+DWORD] %GLOBAL__argc              # Get argc
	push_rax                                       # Push it onto stack
	mov_rax,[rip+DWORD] %GLOBAL__argv              # Get argv
	push_rax                                       # Push it onto stack
	mov_rax,[rip+DWORD] %GLOBAL__envp              # Get envp
	push_rax                                       # Push it onto stack
	call %FUNCTION_main

:FUNCTION__exit
	;; Do UEFI cleanup
	call %enter_uefi_stack                         # Switch back to UEFI stack
	push_rax                                       # Save exit code
	call %FUNCTION__cleanup
	pop_rax                                        # Restore exit code

:FUNCTION___exit
	mov_rsp,[rip+DWORD] %__return_address          # Get UEFI return address
	pop_r15
	pop_r14
	pop_r13
	pop_r12
	pop_rsi
	pop_rdi
	pop_rbx
	pop_rbp
	ret

# Switch to uefi stack
# does not change any other registers except for rbp
:enter_uefi_stack
	mov_[rip+DWORD],rax %__temp_rax           # save RAX
	pop_rax                                   # Save return address
	mov_[rip+DWORD],rsp %GLOBAL___user_stack  # save user stack
	mov_rsp,[rip+DWORD] %__uefi_stack         # restore system stack
	push_rax                                  # Restore return address
	mov_rax,[rip+DWORD] %__temp_rax           # restore RAX
	mov_rbp,rsp                               # Fix rbp
	add_rbp, %8                               # Fix rbp
	ret

# Switch to user stack
# does not change any other registers except for rbp
:exit_uefi_stack
	mov_[rip+DWORD],rax %__temp_rax           # save RAX
	pop_rax                                   # Save return address
	mov_[rip+DWORD],rsp %__uefi_stack         # save system stack
	mov_rsp,[rip+DWORD] %GLOBAL___user_stack  # restore user stack
	push_rax                                  # Restore return address
	mov_rax,[rip+DWORD] %__temp_rax           # restore RAX
	mov_rbp,rsp                               # Fix rbp
	add_rbp, %8                               # Fix rbp
	ret

:__return_address
	NULL

:__temp_rax
	NULL

:__uefi_stack
	NULL

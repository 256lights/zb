# SPDX-FileCopyrightText: 2016 Jeremiah Orians <jeremiah@pdp10.guru>
# SPDX-FileCopyrightText: 2017 Jan Nieuwenhuizen <janneke@gnu.org>
#
# SPDX-License-Identifier: GPL-3.0-or-later

DEFINE add_r12, 4981C4
DEFINE add_r13, 4983C5
DEFINE add_rbx, 4883C3
DEFINE add_rsi, 4883C6
DEFINE add_rdi, 4881C7
DEFINE add_rax,r14 4C01F0
DEFINE call E8
DEFINE cmp_al, 3C
DEFINE cmp_al,bl 38D8
DEFINE cmp_rax, 4883F8
DEFINE cmp_rbx, 4883FB
DEFINE cmp_rcx, 4883F9
DEFINE cmp_r15, 4983FF
DEFINE je 0F84
DEFINE jg 0F8F
DEFINE jl 0F8C
DEFINE jmp E9
DEFINE jne 0F85
DEFINE lea_rsi,[rip+DWORD] 488D35
DEFINE mov_rax,r12 4C89E0
DEFINE mov_rbx,r12 4C89E3
DEFINE mov_rcx,r11 4C89D9
DEFINE mov_rdi,rax 4889C7
DEFINE mov_rdi,r9 4C89CF
DEFINE mov_rdi,r10 4C89D7
DEFINE mov_rdx,rax 4889C2
DEFINE mov_rdx,r13 4C89EA
DEFINE mov_rsi,rsp 4889E6
DEFINE mov_r9,rax 4989C1
DEFINE mov_r10,rax 4989C2
DEFINE mov_r11,rax 4989C3
DEFINE mov_r12,rax 4989C4
DEFINE mov_r12,rbx 4989DC
DEFINE mov_r14,rax 4989C6
DEFINE mov_al,[rsi] 8A06
DEFINE mov_bl,[rdi] 8A1F
DEFINE mov_rcx,[rbx] 488B0B
DEFINE mov_rcx,[rcx] 488B09
DEFINE mov_rax,[rcx+BYTE] 488B41
DEFINE mov_rsi,[rcx+BYTE] 488B71
DEFINE mov_al,[rip+DWORD] 8A05
DEFINE mov_rax,[rip+DWORD] 488B05
DEFINE mov_rbx,[rip+DWORD] 488B1D
DEFINE mov_rdi,[rip+DWORD] 488B3D
DEFINE mov_[rbx],al 8803
DEFINE mov_[rbx],rcx 48890B
DEFINE mov_[rax],r11 4C8918
DEFINE mov_[rax+BYTE],r13 4C8968
DEFINE mov_[r11+BYTE],r12 4D8963
DEFINE mov_[rip+DWORD],r12 4C8925
DEFINE mov_rax, 48C7C0
DEFINE mov_rcx, 48C7C1
DEFINE mov_rdi, 48C7C7
DEFINE mov_rdx, 48C7C2
DEFINE mov_rsi, 48C7C6
DEFINE mov_r11, 49C7C3
DEFINE mov_r13, 49C7C5
DEFINE mov_r14, 49C7C6
DEFINE mov_r15, 49C7C7
DEFINE movzx_rax,al 480FB6C0
DEFINE movzx_rbx,bl 480FB6DB
DEFINE not_r15 49F7D7
DEFINE NULL 00000000
DEFINE pop_rax 58
DEFINE pop_rbx 5B
DEFINE pop_rcx 59
DEFINE pop_rdi 5F
DEFINE pop_r11 415B
DEFINE push_rax 50
DEFINE push_rbx 53
DEFINE push_rcx 51
DEFINE push_r11 4153
DEFINE ret C3
DEFINE shl_r14, 49C1E6
DEFINE sub_rax,rdx 4829D0
DEFINE sub_rax, 83E8
DEFINE syscall 0F05
DEFINE test_rax,rax 4885C0

# Where the ELF Header is going to hit
# Simply jump to _start
# Our main function

	# Register usage:
	# RAX, RDX, RSI, RDI => Temps
	# R15 => Flag
	# R14 => High bits
	# R13 => IP
	# R12 => MALLOC
	# R11 => HEAD

	# Struct format: (size 24)
	# NEXT => 0
	# TARGET => 8
	# NAME => 16

:_start
	mov_rdi, %0                 # Get current pointer
	call %malloc                # Get current HEAP
	mov_rdi,rax                 # Using current
	mov_r12,rax                 # Setup MALLOC
	add_rdi, %8388608           # Create space for temp [8MB]
	call %malloc                # Give ourselves 8192000 bytes to work with

	mov_[rip+DWORD],r12 %scratch # Allocate space for scratch area
	add_r12, %0x800             # 2 KiB of scratch

	pop_rax                     # Get the number of arguments
	pop_rdi                     # Get the program name
	pop_rdi                     # Get the actual input name
	mov_rsi, %0                 # prepare read_only
	mov_rax, %2                 # the syscall number for open()
	syscall                     # Now open that damn file
	mov_r9,rax                  # Preserve the file pointer we were given

	pop_rdi                     # Get the actual output name
	mov_rsi, %577               # Prepare file as O_WRONLY|O_CREAT|O_TRUNC
	mov_rdx, %448               # Prepare file as RWX for owner only (700 in octal)
	mov_rax, %2                 # the syscall number for open()
	syscall                     # Now open that damn file
	cmp_rax, !0                 # Check for missing output
	jg %_start_out              # Have real input
	mov_rax, %1                 # Use stdout

:_start_out
	mov_r10,rax                 # Preserve the file pointer we were given

	call %ClearScratch          # Zero scratch
	mov_r15, %-1                # Our flag for byte processing
	mov_r14, %0                 # temp storage for the sum
	mov_r13, %0x00600000        # Our starting IP
	mov_r11, %0                 # HEAD = NULL
	call %First_pass            # Process it

	# rewind input file
	mov_rdi,r9                  # Using our input file
	mov_rsi, %0                 # Offset Zero
	mov_rdx, %0                 # Whence Zero
	mov_rax, %8                 # lseek
	push_r11                    # Protect HEAD
	syscall
	pop_r11                     # Restore HEAD

	mov_r15, %-1                # Our flag for byte processing
	mov_r14, %0                 # temp storage for the sum
	mov_r13, %0x00600000        # Our starting IP
	call %Second_pass           # Process it

	jmp %Done

:First_pass
	call %Read_byte

	# Deal with EOF
	cmp_rax, !-4
	je %First_pass_done

	# Check for :
	cmp_rax, !0x3A
	jne %First_pass_0

	# Deal with label
	jmp %StoreLabel

:First_pass_0
	# Check for !
	cmp_rax, !0x21
	je %First_pass_pointer

	# Check for @
	cmp_rax, !0x40
	je %First_pass_pointer

	# Check for $
	cmp_rax, !0x24
	je %First_pass_pointer

	# Check for %
	cmp_rax, !0x25
	je %First_pass_pointer

	# Check for &
	cmp_rax, !0x26
	je %First_pass_pointer

	# Deal with everything else
	call %hex                   # Process our char

	# Deal with EOF
	cmp_rax, !-4
	je %First_pass_done

	# deal with -1 values
	cmp_rax, !0
	jl %First_pass

	# deal with toggle
	cmp_r15, !0
	je %First_pass_1
	add_r13, !1                 # Increment IP

:First_pass_1
	not_r15
	jmp %First_pass

:Update_Pointer
	# Check for !
	cmp_rax, !0x21
	je %Update_Pointer_1

	# Check for @
	cmp_rax, !0x40
	je %Update_Pointer_2

	# Check for $
	cmp_rax, !0x24
	je %Update_Pointer_2

	# Check for %
	cmp_rax, !0x25
	je %Update_Pointer_4

	# Check for &
	cmp_rax, !0x26
	je %Update_Pointer_4

	# deal with bad input
	call %fail

:Update_Pointer_4
	add_r13, !2                 # Increment IP
:Update_Pointer_2
	add_r13, !1                 # Increment IP
:Update_Pointer_1
	add_r13, !1                 # Increment IP
	ret

:First_pass_pointer
	# Deal with Pointer to label
	call %Update_Pointer        # Increment IP
	mov_rbx,[rip+DWORD] %scratch # Using scratch
	call %consume_token         # Read token
	call %ClearScratch          # Throw away token
	cmp_rax, !0x3E              # check for '>'
	jne %First_pass             # Loop again

	# Deal with %label>label case
	mov_rbx,[rip+DWORD] %scratch # Write to scratch
	call %consume_token         # get token
	call %ClearScratch          # Clean up after ourselves
	jmp %First_pass             # Loop again

:First_pass_done
	ret

:hex
	# deal with EOF
	cmp_rax, !-4
	je %EOF
	# deal with line comments starting with #
	cmp_rax, !0x23
	je %ascii_comment
	# deal with line comments starting with ;
	cmp_rax, !0x3B
	je %ascii_comment
	# deal all ascii less than 0
	cmp_rax, !0x30
	jl %ascii_other
	# deal with 0-9
	cmp_rax, !0x3A
	jl %ascii_num
	# deal with all ascii less than A
	cmp_rax, !0x41
	jl %ascii_other
	# deal with A-F
	cmp_rax, !0x47
	jl %ascii_high
	# deal with all ascii less than a
	cmp_rax, !0x61
	jl %ascii_other
	# deal with a-f
	cmp_rax, !0x67
	jl %ascii_low
	# The rest that remains needs to be ignored
	jmp %ascii_other

:Second_pass
	call %Read_byte

	# Deal with EOF
	cmp_rax, !-4
	je %Second_pass_done

	# Simply drop the label
	cmp_rax, !0x3A
	jne %Second_pass_0

	mov_rbx,[rip+DWORD] %scratch # Using scratch
	call %consume_token         # Read token
	call %ClearScratch          # Throw away token

	jmp %Second_pass

:Second_pass_0
	# Deal with % pointer
	cmp_rax, !0x25
	je %StorePointer_rel4

	# Deal with @ pointer
	cmp_rax, !0x40
	je %StorePointer_rel2

	# Deal with ! pointer
	cmp_rax, !0x21
	je %StorePointer_rel1

	# Deal with & pointer
	cmp_rax, !0x26
	je %StorePointer_abs4

	# Deal with $ pointer
	cmp_rax, !0x24
	je %StorePointer_abs2

:Second_pass_1
	# Deal with everything else
	call %hex                   # Process our char

	# Deal with EOF
	cmp_rax, !-4
	je %Second_pass_done

	# deal with -1 values
	cmp_rax, !0
	jl %Second_pass

	# deal with toggle
	cmp_r15, !0
	je %print

	# process first byte of pair
	mov_r14,rax
	mov_r15, %0
	jmp %Second_pass

:Second_pass_done
:EOF
	ret

:ascii_num
	sub_rax, !0x30
	ret
:ascii_low
	sub_rax, !0x57
	ret
:ascii_high
	sub_rax, !0x37
	ret
:ascii_other
	mov_rax, %-1
	ret
:ascii_comment
	call %Read_byte
	cmp_rax, !0x0D
	je %ascii_comment_cr
	cmp_rax, !0x0A
	jne %ascii_comment
:ascii_comment_cr
	mov_rax, %-1
	ret

# process second byte of pair
:print
	# update the sum and store in output
	shl_r14, !4
	add_rax,r14

	# flip the toggle
	not_r15

	# Print our first Hex
	mov_rdx, %1                 # set the size of chars we want
	call %print_chars

	add_r13, !1                 # Increment IP
	jmp %Second_pass

:Done
	# program completed Successfully
	mov_rdi, %0                 # All is well
	mov_rax, %0x3C              # put the exit syscall number in eax
	syscall                     # Call it a good day


# Malloc isn't actually required if the program being built fits in the initial memory
# However, it doesn't take much to add it.
# Requires a value in RDI
:malloc
	mov_rax, %12                # the Syscall # for SYS_BRK
	push_r11                    # Protect r11
	syscall                     # call the Kernel
	pop_r11                     # Restore r11
	ret


:Read_byte
	# Attempt to read 1 byte from STDIN
	mov_rdx, %1                 # set the size of chars we want
	lea_rsi,[rip+DWORD] %write  # Where to put it
	mov_rdi,r9                  # Where are we reading from
	mov_rax, %0                 # the syscall number for read
	push_r11                    # Protect r11
	syscall                     # call the Kernel
	pop_r11                     # Restore r11

	test_rax,rax                # check what we got
	je %Read_byte_1             # Got EOF call it done

	# load byte
	mov_al,[rip+DWORD] %write   # load char
	movzx_rax,al                # We have to zero extend it to use it
	ret

# Deal with EOF
:Read_byte_1
	mov_rax, %-4                # Put EOF in rax
	ret

:print_chars
	push_rax                    # Push address of chars onto stack
	mov_rsi,rsp                 # What we are writing
	mov_rdi,r10                 # Write to target file
	mov_rax, %1                 # the syscall number for write
	push_r11                    # Protect HEAD
	syscall                     # call the Kernel
	pop_r11                     # Restore HEAD
	pop_rax                     # deallocate stack
	ret

	# Receives pointer in RBX
	# Writes out char and updates RBX
:consume_token
	call %Read_byte             # Consume_token

	# Check for \t
	cmp_rax, !0x09
	je %consume_token_done

	# Check for \n
	cmp_rax, !0x0A
	je %consume_token_done

	# Check for ' '
	cmp_rax, !0x20
	je %consume_token_done

	# Check for '>'
	cmp_rax, !0x3E
	je %consume_token_done

	# Looks like we are still reading token
	mov_[rbx],al                # Store char
	add_rbx, !1                 # Point to next spot
	jmp %consume_token          # loop until done

:consume_token_done
	mov_rcx, %0                 # Pad with nulls
	mov_[rbx],rcx
	add_rbx, !8
	ret

:StoreLabel
	mov_rax,r12                 # ENTRY
	add_r12, %24                # CALLOC
	mov_[rax+BYTE],r13 !8       # ENTRY->TARGET = IP
	mov_[rax],r11               # ENTRY->NEXT = JUMP_TABLE
	mov_r11,rax                 # JUMP_TABLE = ENTRY
	mov_[r11+BYTE],r12 !16      # ENTRY->NAME = TOKEN
	mov_rbx,r12                 # Write Starting after struct
	call %consume_token         # Collect whole string
	mov_r12,rbx                 # Update HEAP
	jmp %First_pass

:GetTarget
	mov_rdi,[rip+DWORD] %scratch # Reset scratch
	mov_rcx,r11                 # Grab JUMP_TABLE
	mov_rsi,[rcx+BYTE] !16      # I->NAME
:GetTarget_loop
	mov_al,[rsi]                # I->NAME[0]
	mov_bl,[rdi]                # scratch[0]
	movzx_rbx,bl                # Zero extend
	movzx_rax,al                # Zero extend
	cmp_al,bl                   # IF TOKEN == I->NAME
	jne %GetTarget_miss         # Oops

	add_rsi, !1
	add_rdi, %1
	cmp_al, !0
	jne %GetTarget_loop         # Loop until
	jmp %GetTarget_done         # Match

	# Miss
:GetTarget_miss
	mov_rcx,[rcx]               # I = I->NEXT
	cmp_rcx, !0                 # IF NULL == I
	je %fail                    # Abort hard

	mov_rsi,[rcx+BYTE] !16      # I->NAME
	mov_rdi,[rip+DWORD] %scratch # Reset scratch
	jmp %GetTarget_loop

:GetTarget_done
	mov_rax,[rcx+BYTE] !8       # Get address
	ret

:ClearScratch
	push_rax                    # Protect against changes
	push_rbx                    # And overwrites
	push_rcx                    # While we work
	mov_rbx,[rip+DWORD] %scratch # Where our scratch is
	mov_rax, %0                 # Using null

:ClearScratch_loop
	mov_rcx,[rbx]               # Get current value
	mov_[rbx],al                # Because we want null
	add_rbx, !1                 # Increment
	cmp_rcx, !0                 # Check if we hit null
	jne %ClearScratch_loop      # Keep looping

	pop_rcx                     # Don't Forget to
	pop_rbx                     # Restore Damage
	pop_rax                     # Entirely
	ret

:StorePointer
	call %Update_Pointer        # Increment IP
	mov_rbx,[rip+DWORD] %scratch # Write to scratch
	call %consume_token         # get token
	push_rax                    # Protect base_sep_p
	mov_rax,[rip+DWORD] %scratch # Pointer to scratch
	call %GetTarget             # Get address of pointer
	call %ClearScratch          # Clean up after ourselves
	mov_rdx,r13                 # base = IP
	pop_rbx                     # Restore base_sep_p
	cmp_rbx, !0x3E              # If base_sep_p == '>'
	jne %StorePointer_done      # If not

	# Deal with %label>label case
	push_rax                    # We need to preserve main target
	mov_rbx,[rip+DWORD] %scratch # Write to scratch
	call %consume_token         # get token
	mov_rax,[rip+DWORD] %scratch # Pointer to scratch
	call %GetTarget             # Get address of pointer
	call %ClearScratch          # Clean up after ourselves
	mov_rdx,rax                 # Use our new base
	pop_rax                     # Restore main target

:StorePointer_done
	ret

:StorePointer_rel4
	call %StorePointer          # Do Common
	sub_rax,rdx                 # target - ip
	mov_rdx, %4                 # set the size of chars we want
	call %print_chars
	call %ClearScratch          # Clean up after ourselves
	jmp %Second_pass

:StorePointer_rel2
	call %StorePointer          # Do Common
	sub_rax,rdx                 # target - ip
	mov_rdx, %2                 # set the size of chars we want
	call %print_chars
	call %ClearScratch          # Clean up after ourselves
	jmp %Second_pass

:StorePointer_rel1
	call %StorePointer          # Do Common
	sub_rax,rdx                 # target - ip
	mov_rdx, %1                 # set the size of chars we want
	call %print_chars
	call %ClearScratch          # Clean up after ourselves
	jmp %Second_pass

:StorePointer_abs4
	call %StorePointer          # Do Common
	mov_rdx, %4                 # set the size of chars we want
	call %print_chars
	call %ClearScratch          # Clean up after ourselves
	jmp %Second_pass

:StorePointer_abs2
	call %StorePointer          # Do Common
	mov_rdx, %2                 # set the size of chars we want
	call %print_chars
	call %ClearScratch          # Clean up after ourselves
	jmp %Second_pass

:fail
	# Some shit went wrong
	mov_rdi, %1                 # All is wrong
	mov_rax, %0x3C              # put the exit syscall number in eax
	syscall                     # Call it a good day


:write
NULL
NULL

:scratch
NULL
NULL

:ELF_end

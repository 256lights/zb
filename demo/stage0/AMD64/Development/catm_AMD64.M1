# SPDX-FileCopyrightText: 2019 Jeremiah Orians <jeremiah@pdp10.guru>
# SPDX-FileCopyrightText: 2023 Andrius Å tikonas <andrius@stikonas.eu>
#
# SPDX-License-Identifier: GPL-3.0-or-later

DEFINE add_rdi, 4881C7
DEFINE cmp_rax, 483D
DEFINE cmp_rdi, 4883FF
DEFINE je 0F84
DEFINE jmp E9
DEFINE mov_rax, 48C7C0
DEFINE mov_rdx, BA
DEFINE mov_rsi, BE
DEFINE mov_rdi, BF
DEFINE mov_rdx,rax 4889C2
DEFINE mov_rdi,r13 4C89EF
DEFINE mov_rdi,r14 4C89F7
DEFINE mov_rdi,r15 4C89FF
DEFINE mov_rsi,r14 4C89F6
DEFINE mov_r13,rax 4989C5
DEFINE mov_r14,rax 4989C6
DEFINE mov_r15,rax 4989C7
DEFINE pop_rax 58
DEFINE pop_rdi 5F
DEFINE push_rax 50
DEFINE syscall 0F05


    # Register usage:
    # R15 => OUTPUT
    # R14 => Buffer
    # R13 => INPUT

# Where the ELF Header is going to hit
# Simply jump to _start
# Our main function
:_start
    pop_rax                     # Get the number of arguments
    pop_rdi                     # Get the program name
    pop_rdi                     # Get the actual output name
    mov_rsi, %577               # Prepare file as O_WRONLY|O_CREAT|O_TRUNCEAT|O_TRUNC
    mov_rdx, %384               # Prepare file as RW for owner only (600 in octal)only (600 in octal)
    mov_rax, %2                 # the syscall number for open()
    syscall                     # Now open that file
    mov_r15,rax                 # Preserve the file pointer we were given

    mov_rax, %12                # the Syscall # for SYS_BRK
    mov_rdi, %0                 # Get current brk
    syscall                     # Let the kernel do the work
    mov_r14,rax                 # Set our malloc pointer

    mov_rax, %12                # the Syscall # for SYS_BRK
    mov_rdi,r14                 # Using current pointer
    add_rdi, %0x100000          # Allocate 1MB
    syscall                     # Let the kernel do the work

:core
    pop_rdi                     # Get the actual input name
    cmp_rdi, !0                 # Check for null string
    je %done                    # Hit null be done

    mov_rsi, %0                 # prepare read_only
    mov_rdx, %0                 # prevent any interactions
    mov_rax, %2                 # the syscall number for open()
    syscall                     # Now open that damn file
    mov_r13,rax                 # Protect INPUT
:keep
    mov_rdx, %0x100000          # set the size of chars we want
    mov_rsi,r14                 # Where to put it
    mov_rdi,r13                 # Where are we reading from
    mov_rax, %0                 # the syscall number for read
    syscall                     # call the Kernel
    push_rax                    # Protect the number of bytes read

    mov_rdx,rax                 # Number of bytes to write
    mov_rsi,r14                 # What we are writing
    mov_rdi,r15                 # Write to target file
    mov_rax, %1                 # the syscall number for write
    syscall                     # call the Kernel

    pop_rax                     # Get bytes read
    cmp_rax, %0x100000          # Check if buffer was fully used
    je %keep                    # Keep looping if was full
    jmp %core                   # Otherwise move to next file

:done
    # program completed Successfully
    mov_rdi, %0                 # All is well
    mov_rax, %0x3C              # put the exit syscall number in eax
    syscall                     # Call it a good day

:ELF_end

## Copyright (C) 2021 Ekaitz Zarraga
## Copyright (C) 2021 Andrius Å tikonas
## Copyright (C) 2021,2022 Gabriel Wicki
## This file is part of stage0.
##
## stage0 is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## stage0 is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with stage0.  If not, see <http://www.gnu.org/licenses/>.

; Register use:
; s2: input fd
; s3: output fd
; s4: toggle
; s5: hold

; Uses top of the stack as i/o buffer

## ELF Header
#:ELF_base
7F 45 4C 46        # e_ident[EI_MAG0-3] ELF's magic number

01                 # e_ident[EI_CLASS] Indicating 32 bit
01                 # e_ident[EI_DATA] Indicating little endianness
01                 # e_ident[EI_VERSION] Indicating original elf

03                 # e_ident[EI_OSABI] Set at 3 for Linux
00                 # e_ident[EI_ABIVERSION] Ignored for Statically linked executables

00 00 00 00 00 00 00 # e_ident[EI_PAD]
02 00              # e_type Indicating Executable
F3 00              # e_machine Indicating RISC-V
01 00 00 00        # e_version Indicating original elf

54 00 60 00        # e_entry Address of the entry point
34 00 00 00        # e_phoff Address of program header table
00 00 00 00        # e_shoff Address of section header table

00 00 00 00        # e_flags

34 00              # e_ehsize Indicating our 52 Byte header

20 00              # e_phentsize size of a program header table
01 00              # e_phnum number of entries in program table

00 00              # e_shentsize size of a section header table
00 00              # e_shnum number of entries in section table

00 00              # e_shstrndx index of the section names

## Program Header
#:ELF_program_headers
#:ELF_program_header__text
01 00 00 00        # ph_type: PT-LOAD = 1
00 00 00 00        # ph_offset

00 00 60 00        # ph_vaddr
00 00 60 00        # ph_physaddr

64 01 00 00        # ph_filesz
64 01 00 00        # ph_memsz

07 00 00 00        # ph_flags: PF-X|PF-W|PF-R = 7
01 00 00 00        # ph_align

# :_start ; (0x0600054)
    13 0A 00 00    # rd_s4 mv                 ; Initialize register
    83 25 81 00    # rd_a1 rs1_sp !8 lw       ; Input file name

    ; Open input file and store FD in s2
    93 08 80 03    # rd_a7 !56 addi           ; sys_openat
    13 05 C0 F9    # rd_a0 !-100 addi         ; AT_FDCWD
    13 06 00 00    # rd_a2 mv                 ; read only
    73 00 00 00    # ecall
    13 09 05 00    # rd_s2 rs1_a0 mv          ; Save fd in s2 for later

    ; Open output file and store the FD in s3
    13 05 C0 F9    # rd_a0 !-100 addi         ; AT_FDCWD
    83 25 C1 00    # rd_a1 rs1_sp !12 lw      ; Output file (argument 3)
    13 06 10 24    # rd_a2 !577 addi          ; octal 00001101
    ; O_TRUNC   00001000
    ; O_CREAT   00000100
    ; O_WRONLY  00000001
    ; OCTAL!

    93 06 00 1C    # rd_a3 !448 addi          ; Set read, write, execute permission on user
    ; S_IRWXU  00700
    ; OCTAL!

    73 00 00 00    # ecall
    93 09 05 00    # rd_s3 rs1_a0 mv          ; Save fd in s3 for later

# :next_byte ; (0x0600088)
    93 08 F0 03    # rd_a7 !63 addi           ; sys_read
    13 05 09 00    # rd_a0 rs1_s2 mv          ; File descriptor
    93 05 01 00    # rd_a1 rs1_sp mv          ; Buffer
    13 06 10 00    # rd_a2 !1 addi            ; Size of what we want to read (set for all subsequent syscalls)
    73 00 00 00    # ecall

    ; If the file ended (0 bytes read) terminate
    63 00 05 0C    # rs1_a0 @terminate beqz
                   # +192B

    ; Check if it's a comment
    03 05 01 00    # rd_a0 rs1_sp lb
    93 02 30 02    # rd_t0 !0x23 addi
    63 08 55 00    # rs1_a0 rs2_t0 @loop beq  ; a0 eq to '#'
                   # +16B
    93 02 B0 03    # rd_t0 !0x3B addi
    63 04 55 00    # rs1_a0 rs2_t0 @loop beq  ; a0 eq to ';'
                   # +8B
    6F 00 80 02    # $not_comment jal
                   # +40B
# :loop ; (0x06000B8)
        13 05 09 00    # rd_a0 rs1_s2 mv   ; File descriptor
        73 00 00 00    # ecall             ; sys_read

        ; If the file ended (0 bytes read) terminate
        63 0E 05 08    # rs1_a0 @terminate beqz
                       # +156B
        ; Check if read byte is the end of the comment (i.e. a newline character),
        ; in that case we continue processing
        03 05 01 00     # rd_a0 rs1_sp lb
        93 02 A0 00     # rd_t0 !0xA addi
        E3 0E 55 FA     # rs1_a0 rs2_t0 @next_byte beq ; a0 eq to \n
                        # -68B
        93 02 D0 00     # rd_t0 !0xD addi
        E3 0A 55 FA     # rs1_a0 rs2_t0 @next_byte beq ; a0 eq to \r
                        # -76B
    6F F0 1F FE    # $loop jal
# :not_comment ; (0x06000DC)
    ; Check if it's a hex character:
    ; in the case it's not, ignores and reads next byte
    03 05 01 00    # rd_a0 rs1_sp lb

    ; Is it between '0' and '9'?
    93 02 00 03    # rd_t0 !48 addi           ; '0' character
    63 4A 55 00    # rs1_a0 rs2_t0 @uppercase_alpha blt
                   # +20B
    93 02 90 03    # rd_t0 !57 addi           ; '9' character
    63 C6 A2 00    # rs1_t0 rs2_a0 @uppercase_alpha blt
                   # +12B
    13 05 05 FD    # rd_a0 rs1_a0 !-48 addi
    6F 00 00 03    # $hex_read jal
                   # +48B
# :uppercase_alpha ; (0x06000F8)
    ; Is it between 'A' and 'F'?
    93 02 10 04    # rd_t0 !65 addi           ; 'A' character
    63 4A 55 00    # rs1_a0 rs2_t0 @lowercase_alpha blt
                   # +20B
    93 02 60 04    # rd_t0 !70 addi           ; 'F' character
    63 C6 A2 00    # rs1_t0 rs2_a0 @lowercase_alpha blt
                   # +12B
    13 05 95 FC    # rd_a0 rs1_a0 !-55 addi
    6F 00 80 01    # $hex_read jal
                   # +24B
# :lowercase_alpha ; (0x0600110)
    ; Is it between 'a' and 'f'?
    93 02 10 06    # rd_t0 !97 addi           ; 'a' character
    E3 4A 55 F6    # rs1_a0 rs2_t0 @next_byte blt ; Not hex, continue reading
                   # -140B
    93 02 60 06    # rd_t0 !102 addi          ; 'f' character
    E3 C6 A2 F6    # rs1_t0 rs2_a0 @next_byte blt ; Not hex, continue reading
                   # -148B
    13 05 95 FA    # rd_a0 rs1_a0 !-87 addi
# :hex_read ; (0x0600124)
    ; END check hex -- leaves the half byte in a0

    63 18 0A 00    # rs1_s4 @combine bnez     ; if toggle != 0 -> combine
                   # +16B
    ; Toggle == 0, we need to prepare for later
    93 0A 05 00    # rd_s5 rs1_a0 mv          ; Load hold

    13 0A 10 00    # rd_s4 !1 addi            ; Set toggle
    6F F0 9F F5    # $next_byte jal           ; Read next byte
                   # -168B

# :combine ; (0x0600134)
    ; Combine half bytes
    93 95 4A 00    # rd_a1 rs1_s5 rs2_x4 slli ; Shift logical left 4 times
    33 05 B5 00    # rd_a0 rs1_a0 rs2_a1 add  ; Combine two half bytes
    ; Leaves the full byte in a0

    ; Values are combined, now we write in the file
    23 00 A1 00    # rs1_sp rs2_a0 sb         ; Store prepared byte in buffer
    93 08 00 04    # rd_a7 !64 addi           ; sys_write
    13 85 09 00    # rd_a0 rs1_s3 mv          ; file descriptor (stdout)
    93 05 01 00    # rd_a1 rs1_sp mv          ; string address
    73 00 00 00    # ecall

    ; Update globals
    13 0A 00 00    # rd_s4 mv                 ; Clear toggle
    93 0A 00 00    # rd_s5 mv                 ; Clear hold

    ; Read next byte
    6F F0 1F F3    # $next_byte jal
                   # -208B

# :terminate  ; (0x60015C)
    ; Terminate program with 0 return code
    93 08 D0 05    # rd_a7 !93 addi           ; sys_exit
    73 00 00 00    # ecall
# PROGRAM END

# :ELF_end ; (0x600164)

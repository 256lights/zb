// Copyright 2025 The zb Authors
// SPDX-License-Identifier: MIT

package macho

import (
	"bytes"
	"encoding/binary"
	"io"
	"os"
	"path/filepath"
	"testing"

	"github.com/google/go-cmp/cmp"
)

func TestRead(t *testing.T) {
	type loadCommand struct {
		cmd  LoadCmd
		data []byte
	}

	tests := []struct {
		name         string
		dataFile     string
		header       FileHeader
		loadCommands []loadCommand
	}{
		{
			name:     "AArch64",
			dataFile: "macho-program-aarch64-apple-macos",
			header: FileHeader{
				ByteOrder:    binary.LittleEndian,
				AddressWidth: 64,
				Type:         TypeExec,

				LoadCommandCount:      15,
				LoadCommandRegionSize: 760,
			},
			loadCommands: []loadCommand{
				{
					cmd: LoadCmdSegment64,
					data: []byte{
						0x19, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00,
						'_', '_', 'P', 'A', 'G', 'E', 'Z', 'E',
						'R', 'O', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
				},
				{
					cmd: LoadCmdSegment64,
					data: []byte{
						0x19, 0x00, 0x00, 0x00, 0xe8, 0x00, 0x00, 0x00,
						'_', '_', 'T', 'E', 'X', 'T', 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
						0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
						0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						'_', '_', 't', 'e', 'x', 't', 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						'_', '_', 'T', 'E', 'X', 'T', 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x94, 0x3f, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
						0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x94, 0x3f, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x04, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						'_', '_', 'u', 'n', 'w', 'i', 'n', 'd',
						'_', 'i', 'n', 'f', 'o', 0x00, 0x00, 0x00,
						'_', '_', 'T', 'E', 'X', 'T', 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0xa8, 0x3f, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
						0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0xa8, 0x3f, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
				},
				{
					cmd: LoadCmdSegment64,
					data: []byte{
						0x19, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00,
						'_', '_', 'L', 'I', 'N', 'K', 'E', 'D',
						'I', 'T', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x40, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
						0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0xb8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
				},
				{
					cmd: LoadCmdDyldInfoOnly,
					data: []byte{
						0x22, 0x00, 0x00, 0x80, 0x30, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x40, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
					},
				},
				{
					cmd: LoadCmdSymtab,
					data: []byte{
						0x02, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
						0x38, 0x40, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
						0x68, 0x40, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
					},
				},
				{
					cmd: LoadCmdDysymtab,
					data: []byte{
						0x0b, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
						0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
				},
				{
					cmd: LoadCmdLoadDylinker,
					data: []byte{
						0x0e, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
						0x0c, 0x00, 0x00, 0x00, '/', 'u', 's', 'r',
						'/', 'l', 'i', 'b', '/', 'd', 'y', 'l',
						'd', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
				},
				{
					cmd: LoadCmdUUID,
					data: []byte{
						0x1b, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
						0xad, 0x61, 0x91, 0xfe, 0xfa, 0xec, 0x30, 0x4e,
						0x83, 0x6d, 0x12, 0x4b, 0xfc, 0x6b, 0x30, 0x5f,
					},
				},
				{
					cmd: LoadCmdBuildVersion,
					data: []byte{
						0x32, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0b, 0x00,
						0x00, 0x03, 0x0b, 0x00, 0x01, 0x00, 0x00, 0x00,
						0x03, 0x00, 0x00, 0x00, 0x03, 0x07, 0x5b, 0x04,
					},
				},
				{
					cmd: LoadCmdSourceVersion,
					data: []byte{
						0x2a, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
				},
				{
					cmd: LoadCmdMain,
					data: []byte{
						0x28, 0x00, 0x00, 0x80, 0x18, 0x00, 0x00, 0x00,
						0x94, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
				},
				{
					cmd: LoadCmdLoadDylib,
					data: []byte{
						0x0c, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
						0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
						0x05, 0x64, 0x0c, 0x05, 0x00, 0x00, 0x01, 0x00,
						'/', 'u', 's', 'r', '/', 'l', 'i', 'b',
						'/', 'l', 'i', 'b', 'S', 'y', 's', 't',
						'e', 'm', '.', 'B', '.', 'd', 'y', 'l',
						'i', 'b', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
				},
				{
					cmd: LoadCmdFunctionStarts,
					data: []byte{
						0x26, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x30, 0x40, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
					},
				},
				{
					cmd: LoadCmdDataInCode,
					data: []byte{
						0x29, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x38, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
				},
				{
					cmd: LoadCmdCodeSignature,
					data: []byte{
						0x1d, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0xa0, 0x40, 0x00, 0x00, 0x18, 0x01, 0x00, 0x00,
					},
				},
			},
		},
		{
			name:     "X86_64",
			dataFile: "macho-program-x86_64-apple-macos",
			header: FileHeader{
				ByteOrder:    binary.LittleEndian,
				AddressWidth: 64,
				Type:         TypeExec,

				LoadCommandCount:      14,
				LoadCommandRegionSize: 744,
			},
			loadCommands: []loadCommand{
				{
					cmd: LoadCmdSegment64,
					data: []byte{
						0x19, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00,
						'_', '_', 'P', 'A', 'G', 'E', 'Z', 'E',
						'R', 'O', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
				},
				{
					cmd: LoadCmdSegment64,
					data: []byte{
						0x19, 0x00, 0x00, 0x00, 0xe8, 0x00, 0x00, 0x00,
						'_', '_', 'T', 'E', 'X', 'T', 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
						0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x05, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
						0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						'_', '_', 't', 'e', 'x', 't', 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						'_', '_', 'T', 'E', 'X', 'T', 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x90, 0x0f, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
						0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x90, 0x0f, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x04, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						'_', '_', 'u', 'n', 'w', 'i', 'n', 'd',
						'_', 'i', 'n', 'f', 'o', 0x00, 0x00, 0x00,
						'_', '_', 'T', 'E', 'X', 'T', 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0xa0, 0x0f, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
						0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0xa0, 0x0f, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
				},
				{
					cmd: LoadCmdSegment64,
					data: []byte{
						0x19, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00,
						'_', '_', 'L', 'I', 'N', 'K', 'E', 'D',
						'I', 'T', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x10, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
						0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
				},
				{
					cmd: LoadCmdDyldInfoOnly,
					data: []byte{
						0x22, 0x00, 0x00, 0x80, 0x30, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x10, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
					},
				},
				{
					cmd: LoadCmdSymtab,
					data: []byte{
						0x02, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
						0x38, 0x10, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
						0x68, 0x10, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
					},
				},
				{
					cmd: LoadCmdDysymtab,
					data: []byte{
						0x0b, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
						0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
				},
				{
					cmd: LoadCmdLoadDylinker,
					data: []byte{
						0x0e, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
						0x0c, 0x00, 0x00, 0x00, '/', 'u', 's', 'r',
						'/', 'l', 'i', 'b', '/', 'd', 'y', 'l',
						'd', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
				},
				{
					cmd: LoadCmdUUID,
					data: []byte{
						0x1b, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
						0xd4, 0x66, 0x72, 0x5c, 0x00, 0x4b, 0x38, 0x66,
						0xaf, 0x76, 0x26, 0x17, 0x7f, 0xea, 0x20, 0xd3,
					},
				},
				{
					cmd: LoadCmdBuildVersion,
					data: []byte{
						0x32, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
						0x01, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0b, 0x00,
						0x00, 0x03, 0x0b, 0x00, 0x01, 0x00, 0x00, 0x00,
						0x03, 0x00, 0x00, 0x00, 0x03, 0x07, 0x5b, 0x04,
					},
				},
				{
					cmd: LoadCmdSourceVersion,
					data: []byte{
						0x2a, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
				},
				{
					cmd: LoadCmdMain,
					data: []byte{
						0x28, 0x00, 0x00, 0x80, 0x18, 0x00, 0x00, 0x00,
						0x90, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
				},
				{
					cmd: LoadCmdLoadDylib,
					data: []byte{
						0x0c, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
						0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
						0x05, 0x64, 0x0c, 0x05, 0x00, 0x00, 0x01, 0x00,
						'/', 'u', 's', 'r', '/', 'l', 'i', 'b',
						'/', 'l', 'i', 'b', 'S', 'y', 's', 't',
						'e', 'm', '.', 'B', '.', 'd', 'y', 'l',
						'i', 'b', 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
				},
				{
					cmd: LoadCmdFunctionStarts,
					data: []byte{
						0x26, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x30, 0x10, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
					},
				},
				{
					cmd: LoadCmdDataInCode,
					data: []byte{
						0x29, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
						0x38, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					},
				},
			},
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			data, err := os.ReadFile(filepath.Join("testdata", test.dataFile))
			if err != nil {
				t.Fatal(err)
			}

			r := bytes.NewReader(data)
			gotHeader, err := ReadFileHeader(r)
			if err != nil {
				t.Fatal("ReadFileHeader:", err)
			}

			if diff := cmp.Diff(&test.header, gotHeader); diff != "" {
				t.Errorf("header (-want +got):\n%s", diff)
			}

			var gotCommands []loadCommand
			commands := gotHeader.NewCommandReader(r)
			for i := 0; commands.Next(); i++ {
				data, err := io.ReadAll(commands)
				if err != nil {
					t.Error("Read command:", err)
				}
				lc, ok := commands.Command()
				if !ok && err == nil {
					t.Errorf("commands[%d] missing type", i)
				}
				gotCommands = append(gotCommands, loadCommand{
					cmd:  lc,
					data: data,
				})

				size, ok := commands.Size()
				switch {
				case !ok && err == nil:
					t.Errorf("commands[%d] missing size", i)
				case ok && int64(len(data)) != int64(size):
					t.Errorf("command size field = %d; command read %d bytes", size, len(data))
				}
			}
			if err := commands.Err(); err != nil {
				t.Error("Commands stopped due to:", err)
			}
			if diff := cmp.Diff(test.loadCommands, gotCommands, cmp.AllowUnexported(loadCommand{})); diff != "" {
				t.Errorf("load commands (-want +got):\n%s", diff)
			}
		})
	}
}

// Code generated by "stringer -type=CodeSignatureMagic,SuperBlobSlot,HashType -linecomment -output=code_signature_string.go"; DO NOT EDIT.

package macho

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CodeSignatureMagicRequirement-4208856064]
	_ = x[CodeSignatureMagicRequirements-4208856065]
	_ = x[CodeSignatureMagicCodeDirectory-4208856066]
	_ = x[CodeSignatureMagicEmbeddedSignature-4208856256]
	_ = x[CodeSignatureMagicEmbeddedEntitlements-4208882033]
	_ = x[CodeSignatureMagicDetachedSignature-4208856257]
	_ = x[CodeSignatureMagicBlobWrapper-4208855809]
}

const (
	_CodeSignatureMagic_name_0 = "CodeSignatureMagicBlobWrapper"
	_CodeSignatureMagic_name_1 = "CodeSignatureMagicRequirementCodeSignatureMagicRequirementsCodeSignatureMagicCodeDirectory"
	_CodeSignatureMagic_name_2 = "CodeSignatureMagicEmbeddedSignatureCodeSignatureMagicDetachedSignature"
	_CodeSignatureMagic_name_3 = "CodeSignatureMagicEmbeddedEntitlements"
)

var (
	_CodeSignatureMagic_index_1 = [...]uint8{0, 29, 59, 90}
	_CodeSignatureMagic_index_2 = [...]uint8{0, 35, 70}
)

func (i CodeSignatureMagic) String() string {
	switch {
	case i == 4208855809:
		return _CodeSignatureMagic_name_0
	case 4208856064 <= i && i <= 4208856066:
		i -= 4208856064
		return _CodeSignatureMagic_name_1[_CodeSignatureMagic_index_1[i]:_CodeSignatureMagic_index_1[i+1]]
	case 4208856256 <= i && i <= 4208856257:
		i -= 4208856256
		return _CodeSignatureMagic_name_2[_CodeSignatureMagic_index_2[i]:_CodeSignatureMagic_index_2[i+1]]
	case i == 4208882033:
		return _CodeSignatureMagic_name_3
	default:
		return "CodeSignatureMagic(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[SuperBlobCodeDirectorySlot-0]
	_ = x[SuperBlobInfoSlot-1]
	_ = x[SuperBlobRequirementsSlot-2]
	_ = x[SuperBlobResourceDirSlot-3]
	_ = x[SuperBlobApplicationSlot-4]
	_ = x[SuperBlobEntitlementsSlot-5]
}

const _SuperBlobSlot_name = "CSSLOT_CODEDIRECTORYCSSLOT_INFOSLOTCSSLOT_REQUIREMENTSCSSLOT_RESOURCEDIRCSSLOT_APPLICATIONCSSLOT_ENTITLEMENTS"

var _SuperBlobSlot_index = [...]uint8{0, 20, 35, 54, 72, 90, 109}

func (i SuperBlobSlot) String() string {
	if i >= SuperBlobSlot(len(_SuperBlobSlot_index)-1) {
		return "SuperBlobSlot(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _SuperBlobSlot_name[_SuperBlobSlot_index[i]:_SuperBlobSlot_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[HashTypeSHA1-1]
	_ = x[HashTypeSHA256-2]
	_ = x[HashTypeSHA256Truncated-3]
	_ = x[HashTypeSHA384-4]
}

const _HashType_name = "CS_HASHTYPE_SHA1CS_HASHTYPE_SHA256CS_HASHTYPE_SHA256_TRUNCATEDCS_HASHTYPE_SHA384"

var _HashType_index = [...]uint8{0, 16, 34, 62, 80}

func (i HashType) String() string {
	i -= 1
	if i >= HashType(len(_HashType_index)-1) {
		return "HashType(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _HashType_name[_HashType_index[i]:_HashType_index[i+1]]
}

// Code generated by "stringer -type=LoadCmd -linecomment -output=load_command_string.go"; DO NOT EDIT.

package macho

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LoadCmdSegment-1]
	_ = x[LoadCmdSymtab-2]
	_ = x[LoadCmdThread-4]
	_ = x[LoadCmdUnixThread-5]
	_ = x[LoadCmdDysymtab-11]
	_ = x[LoadCmdLoadDylib-12]
	_ = x[LoadCmdLoadDylinker-14]
	_ = x[LoadCmdIDDylinker-15]
	_ = x[LoadCmdSegment64-25]
	_ = x[LoadCmdUUID-27]
	_ = x[LoadCmdRPath-2147483676]
	_ = x[LoadCmdCodeSignature-29]
	_ = x[LoadCmdSourceVersion-42]
	_ = x[LoadCmdDyldInfo-34]
	_ = x[LoadCmdDyldInfoOnly-2147483682]
	_ = x[LoadCmdFunctionStarts-38]
	_ = x[LoadCmdDataInCode-41]
	_ = x[LoadCmdMain-2147483688]
	_ = x[LoadCmdBuildVersion-50]
}

const _LoadCmd_name = "LC_SEGMENTLC_SYMTABLC_THREADLC_UNIXTHREADLC_DYSYMTABLC_LOAD_DYLIBLC_LOAD_DYLINKERLC_ID_DYLINKERLC_SEGMENT_64LC_UUIDLC_CODE_SIGNATURELC_DYLD_INFOLC_FUNCTION_STARTSLC_DATA_IN_CODELC_SOURCE_VERSIONLC_BUILD_VERSIONLC_RPATHLC_DYLD_INFO_ONLYLC_MAIN"

var _LoadCmd_map = map[LoadCmd]string{
	1:          _LoadCmd_name[0:10],
	2:          _LoadCmd_name[10:19],
	4:          _LoadCmd_name[19:28],
	5:          _LoadCmd_name[28:41],
	11:         _LoadCmd_name[41:52],
	12:         _LoadCmd_name[52:65],
	14:         _LoadCmd_name[65:81],
	15:         _LoadCmd_name[81:95],
	25:         _LoadCmd_name[95:108],
	27:         _LoadCmd_name[108:115],
	29:         _LoadCmd_name[115:132],
	34:         _LoadCmd_name[132:144],
	38:         _LoadCmd_name[144:162],
	41:         _LoadCmd_name[162:177],
	42:         _LoadCmd_name[177:194],
	50:         _LoadCmd_name[194:210],
	2147483676: _LoadCmd_name[210:218],
	2147483682: _LoadCmd_name[218:235],
	2147483688: _LoadCmd_name[235:242],
}

func (i LoadCmd) String() string {
	if str, ok := _LoadCmd_map[i]; ok {
		return str
	}
	return "LoadCmd(" + strconv.FormatInt(int64(i), 10) + ")"
}

// Code generated by "stringer -type=TagMethod -linecomment -output=tag_methods_string.go"; DO NOT EDIT.

package luacode

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TagMethodIndex-0]
	_ = x[TagMethodNewIndex-1]
	_ = x[TagMethodGC-2]
	_ = x[TagMethodMode-3]
	_ = x[TagMethodLen-4]
	_ = x[TagMethodEQ-5]
	_ = x[TagMethodAdd-6]
	_ = x[TagMethodSub-7]
	_ = x[TagMethodMul-8]
	_ = x[TagMethodMod-9]
	_ = x[TagMethodPow-10]
	_ = x[TagMethodDiv-11]
	_ = x[TagMethodIDiv-12]
	_ = x[TagMethodBAnd-13]
	_ = x[TagMethodBOr-14]
	_ = x[TagMethodBXOR-15]
	_ = x[TagMethodSHL-16]
	_ = x[TagMethodSHR-17]
	_ = x[TagMethodUNM-18]
	_ = x[TagMethodBNot-19]
	_ = x[TagMethodLT-20]
	_ = x[TagMethodLE-21]
	_ = x[TagMethodConcat-22]
	_ = x[TagMethodCall-23]
	_ = x[TagMethodClose-24]
}

const _TagMethod_name = "__index__newindex__gc__mode__len__eq__add__sub__mul__mod__pow__div__idiv__band__bor__bxor__shl__shr__unm__bnot__lt__le__concat__call__close"

var _TagMethod_index = [...]uint8{0, 7, 17, 21, 27, 32, 36, 41, 46, 51, 56, 61, 66, 72, 78, 83, 89, 94, 99, 104, 110, 114, 118, 126, 132, 139}

func (i TagMethod) String() string {
	if i >= TagMethod(len(_TagMethod_index)-1) {
		return "TagMethod(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TagMethod_name[_TagMethod_index[i]:_TagMethod_index[i+1]]
}

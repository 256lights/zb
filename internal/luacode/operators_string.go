// Code generated by "stringer -type=ArithmeticOperator,unaryOperator,binaryOperator -output=operators_string.go"; DO NOT EDIT.

package luacode

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Add-1]
	_ = x[Subtract-2]
	_ = x[Multiply-3]
	_ = x[Modulo-4]
	_ = x[Power-5]
	_ = x[Divide-6]
	_ = x[IntegerDivide-7]
	_ = x[BitwiseAnd-8]
	_ = x[BitwiseOr-9]
	_ = x[BitwiseXOR-10]
	_ = x[ShiftLeft-11]
	_ = x[ShiftRight-12]
	_ = x[UnaryMinus-13]
	_ = x[BitwiseNot-14]
}

const _ArithmeticOperator_name = "AddSubtractMultiplyModuloPowerDivideIntegerDivideBitwiseAndBitwiseOrBitwiseXORShiftLeftShiftRightUnaryMinusBitwiseNot"

var _ArithmeticOperator_index = [...]uint8{0, 3, 11, 19, 25, 30, 36, 49, 59, 68, 78, 87, 97, 107, 117}

func (i ArithmeticOperator) String() string {
	i -= 1
	if i < 0 || i >= ArithmeticOperator(len(_ArithmeticOperator_index)-1) {
		return "ArithmeticOperator(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _ArithmeticOperator_name[_ArithmeticOperator_index[i]:_ArithmeticOperator_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[unaryOperatorNone-0]
	_ = x[unaryOperatorMinus-1]
	_ = x[unaryOperatorBNot-2]
	_ = x[unaryOperatorNot-3]
	_ = x[unaryOperatorLen-4]
}

const _unaryOperator_name = "unaryOperatorNoneunaryOperatorMinusunaryOperatorBNotunaryOperatorNotunaryOperatorLen"

var _unaryOperator_index = [...]uint8{0, 17, 35, 52, 68, 84}

func (i unaryOperator) String() string {
	if i < 0 || i >= unaryOperator(len(_unaryOperator_index)-1) {
		return "unaryOperator(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _unaryOperator_name[_unaryOperator_index[i]:_unaryOperator_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[binaryOperatorNone-0]
	_ = x[binaryOperatorAdd-1]
	_ = x[binaryOperatorSub-2]
	_ = x[binaryOperatorMul-3]
	_ = x[binaryOperatorMod-4]
	_ = x[binaryOperatorPow-5]
	_ = x[binaryOperatorDiv-6]
	_ = x[binaryOperatorIDiv-7]
	_ = x[binaryOperatorBAnd-8]
	_ = x[binaryOperatorBOr-9]
	_ = x[binaryOperatorBXor-10]
	_ = x[binaryOperatorShiftL-11]
	_ = x[binaryOperatorShiftR-12]
	_ = x[binaryOperatorConcat-13]
	_ = x[binaryOperatorEq-14]
	_ = x[binaryOperatorLT-15]
	_ = x[binaryOperatorLE-16]
	_ = x[binaryOperatorNE-17]
	_ = x[binaryOperatorGT-18]
	_ = x[binaryOperatorGE-19]
	_ = x[binaryOperatorAnd-20]
	_ = x[binaryOperatorOr-21]
}

const _binaryOperator_name = "binaryOperatorNonebinaryOperatorAddbinaryOperatorSubbinaryOperatorMulbinaryOperatorModbinaryOperatorPowbinaryOperatorDivbinaryOperatorIDivbinaryOperatorBAndbinaryOperatorBOrbinaryOperatorBXorbinaryOperatorShiftLbinaryOperatorShiftRbinaryOperatorConcatbinaryOperatorEqbinaryOperatorLTbinaryOperatorLEbinaryOperatorNEbinaryOperatorGTbinaryOperatorGEbinaryOperatorAndbinaryOperatorOr"

var _binaryOperator_index = [...]uint16{0, 18, 35, 52, 69, 86, 103, 120, 138, 156, 173, 191, 211, 231, 251, 267, 283, 299, 315, 331, 347, 364, 380}

func (i binaryOperator) String() string {
	if i < 0 || i >= binaryOperator(len(_binaryOperator_index)-1) {
		return "binaryOperator(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _binaryOperator_name[_binaryOperator_index[i]:_binaryOperator_index[i+1]]
}

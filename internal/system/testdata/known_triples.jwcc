// Copyright 2025 The zb Authors
// SPDX-License-Identifier: MIT
{
  "i386-linux": {
    "os": "linux",
    "vendor": "unknown",
    "arch": "i386",
    "env": "unknown",
    "isX86": true,
    "isARM": false,
    "isRISCV": false,
    "is32Bit": true,
    "is64Bit": false,
    "isMacOS": false,
    "isiOS": false,
    "isDarwin": false,
    "isLinux": true,
    "isWindows": false,
    "normalized": "i386-linux",
  },
  "i586-linux": {
    "os": "linux",
    "vendor": "unknown",
    "arch": "i586",
    "env": "unknown",
    "isX86": true,
    "isARM": false,
    "isRISCV": false,
    "is32Bit": true,
    "is64Bit": false,
    "isMacOS": false,
    "isiOS": false,
    "isDarwin": false,
    "isLinux": true,
    "isWindows": false,
    "normalized": "i586-linux",
  },
  "i686-linux": {
    "os": "linux",
    "vendor": "unknown",
    "arch": "i686",
    "env": "unknown",
    "isX86": true,
    "isARM": false,
    "isRISCV": false,
    "is32Bit": true,
    "is64Bit": false,
    "isMacOS": false,
    "isiOS": false,
    "isDarwin": false,
    "isLinux": true,
    "isWindows": false,
    "normalized": "i686-linux",
  },
  "i686-unknown-linux": {
    "os": "linux",
    "vendor": "unknown",
    "arch": "i686",
    "env": "unknown",
    "isX86": true,
    "isARM": false,
    "isRISCV": false,
    "is32Bit": true,
    "is64Bit": false,
    "isMacOS": false,
    "isiOS": false,
    "isDarwin": false,
    "isLinux": true,
    "isWindows": false,
    "normalized": "i686-linux",
  },
  "i686-pc-linux": {
    "os": "linux",
    "vendor": "pc",
    "arch": "i686",
    "env": "unknown",
    "isX86": true,
    "isARM": false,
    "isRISCV": false,
    "is32Bit": true,
    "is64Bit": false,
    "isMacOS": false,
    "isiOS": false,
    "isDarwin": false,
    "isLinux": true,
    "isWindows": false,
    "normalized": "i686-pc-linux",
  },
  "x86_64-linux": {
    "os": "linux",
    "vendor": "unknown",
    "arch": "x86_64",
    "env": "unknown",
    "isX86": true,
    "isARM": false,
    "isRISCV": false,
    "is32Bit": false,
    "is64Bit": true,
    "isMacOS": false,
    "isiOS": false,
    "isDarwin": false,
    "isLinux": true,
    "isWindows": false,
    "normalized": "x86_64-linux",
  },
  "x86_64-unknown-linux": {
    "os": "linux",
    "vendor": "unknown",
    "arch": "x86_64",
    "env": "unknown",
    "isX86": true,
    "isARM": false,
    "isRISCV": false,
    "is32Bit": false,
    "is64Bit": true,
    "isMacOS": false,
    "isiOS": false,
    "isDarwin": false,
    "isLinux": true,
    "isWindows": false,
    "normalized": "x86_64-linux",
  },
  "aarch64-linux": {
    "os": "linux",
    "vendor": "unknown",
    "arch": "aarch64",
    "env": "unknown",
    "isX86": false,
    "isARM": true,
    "isRISCV": false,
    "is32Bit": false,
    "is64Bit": true,
    "isMacOS": false,
    "isiOS": false,
    "isDarwin": false,
    "isLinux": true,
    "isWindows": false,
    "normalized": "aarch64-linux",
  },
  "x86_64-unknown-linux-musl": {
    "os": "linux",
    "vendor": "unknown",
    "arch": "x86_64",
    "env": "musl",
    "isX86": true,
    "isARM": false,
    "isRISCV": false,
    "is32Bit": false,
    "is64Bit": true,
    "isMacOS": false,
    "isiOS": false,
    "isDarwin": false,
    "isLinux": true,
    "isWindows": false,
    // If we include the environment, use all four parts.
    "normalized": "x86_64-unknown-linux-musl",
  },
  "riscv32-linux": {
    "os": "linux",
    "vendor": "unknown",
    "arch": "riscv32",
    "env": "unknown",
    "isX86": false,
    "isARM": false,
    "isRISCV": true,
    "is32Bit": true,
    "is64Bit": false,
    "isMacOS": false,
    "isiOS": false,
    "isDarwin": false,
    "isLinux": true,
    "isWindows": false,
    "normalized": "riscv32-linux",
  },
  "riscv64-linux": {
    "os": "linux",
    "vendor": "unknown",
    "arch": "riscv64",
    "env": "unknown",
    "isX86": false,
    "isARM": false,
    "isRISCV": true,
    "is32Bit": false,
    "is64Bit": true,
    "isMacOS": false,
    "isiOS": false,
    "isDarwin": false,
    "isLinux": true,
    "isWindows": false,
    "normalized": "riscv64-linux",
  },
  "x86_64-darwin": {
    "os": "darwin",
    "vendor": "apple",
    "arch": "x86_64",
    "env": "unknown",
    "isX86": true,
    "isARM": false,
    "isRISCV": false,
    "is32Bit": false,
    "is64Bit": true,
    // "darwin" is the historical name for macOS.
    "isMacOS": true,
    "isiOS": false,
    "isDarwin": true,
    "isLinux": false,
    "isWindows": false,
    // Always put in vendor, because it is not unknown.
    "normalized": "x86_64-apple-darwin",
  },
  "x86_64-apple-darwin": {
    "os": "darwin",
    "vendor": "apple",
    "arch": "x86_64",
    "env": "unknown",
    "isX86": true,
    "isARM": false,
    "isRISCV": false,
    "is32Bit": false,
    "is64Bit": true,
    // "darwin" is the historical name for macOS.
    "isMacOS": true,
    "isiOS": false,
    "isDarwin": true,
    "isLinux": false,
    "isWindows": false,
    // Always put in vendor, because it is not unknown.
    "normalized": "x86_64-apple-darwin",
  },
  "x86_64-unknown-darwin": {
    "os": "darwin",
    "vendor": "unknown",
    "arch": "x86_64",
    "env": "unknown",
    "isX86": true,
    "isARM": false,
    "isRISCV": false,
    "is32Bit": false,
    "is64Bit": true,
    "isMacOS": true,
    "isiOS": false,
    // "darwin" is the historical name for macOS.
    "isDarwin": true,
    "isLinux": false,
    "isWindows": false,
    // Always put in vendor so that it is unambiguous when parsing.
    "normalized": "x86_64-unknown-darwin",
  },
  "x86_64-macos": {
    "os": "macos",
    "vendor": "apple",
    "arch": "x86_64",
    "env": "unknown",
    "isX86": true,
    "isARM": false,
    "isRISCV": false,
    "is32Bit": false,
    "is64Bit": true,
    "isMacOS": true,
    "isiOS": false,
    "isDarwin": true,
    "isLinux": false,
    "isWindows": false,
    // Always put in vendor, because it is not unknown.
    "normalized": "x86_64-apple-macos",
  },
  "aarch64-macos": {
    "os": "macos",
    "vendor": "apple",
    "arch": "aarch64",
    "env": "unknown",
    "isX86": false,
    "isARM": true,
    "isRISCV": false,
    "is32Bit": false,
    "is64Bit": true,
    "isMacOS": true,
    "isiOS": false,
    "isDarwin": true,
    "isLinux": false,
    "isWindows": false,
    // Always put in vendor, because it is not unknown.
    "normalized": "aarch64-apple-macos",
  },
  "arm-ios": {
    "os": "ios",
    "vendor": "apple",
    "arch": "arm",
    "env": "unknown",
    "isX86": false,
    "isARM": true,
    "isRISCV": false,
    "is32Bit": true,
    "is64Bit": false,
    "isMacOS": false,
    "isiOS": true,
    // iOS is Darwin-based.
    "isDarwin": true,
    "isLinux": false,
    "isWindows": false,
    // Always put in vendor, because it is not unknown.
    "normalized": "arm-apple-ios",
  },
  "aarch64-ios": {
    "os": "ios",
    "vendor": "apple",
    "arch": "aarch64",
    "env": "unknown",
    "isX86": false,
    "isARM": true,
    "isRISCV": false,
    "is32Bit": false,
    "is64Bit": true,
    "isMacOS": false,
    "isiOS": true,
    // iOS is Darwin-based.
    "isDarwin": true,
    "isLinux": false,
    "isWindows": false,
    // Always put in vendor, because it is not unknown.
    "normalized": "aarch64-apple-ios",
  },
  "i586-windows": {
    "os": "windows",
    "vendor": "pc",
    "arch": "i586",
    "env": "msvc",
    "isX86": true,
    "isARM": false,
    "isRISCV": false,
    "is32Bit": true,
    "is64Bit": false,
    "isMacOS": false,
    "isiOS": false,
    "isDarwin": false,
    "isLinux": false,
    "isWindows": true,
    "normalized": "i586-pc-windows",
  },
  "i686-windows": {
    "os": "windows",
    "vendor": "pc",
    "arch": "i686",
    "env": "msvc",
    "isX86": true,
    "isARM": false,
    "isRISCV": false,
    "is32Bit": true,
    "is64Bit": false,
    "isMacOS": false,
    "isiOS": false,
    "isDarwin": false,
    "isLinux": false,
    "isWindows": true,
    "normalized": "i686-pc-windows",
  },
  "x86_64-windows": {
    "os": "windows",
    "vendor": "pc",
    "arch": "x86_64",
    "env": "msvc",
    "isX86": true,
    "isARM": false,
    "isRISCV": false,
    "is32Bit": false,
    "is64Bit": true,
    "isMacOS": false,
    "isiOS": false,
    "isDarwin": false,
    "isLinux": false,
    "isWindows": true,
    "normalized": "x86_64-pc-windows",
  },
  "x86_64-pc-windows": {
    "os": "windows",
    "vendor": "pc",
    "arch": "x86_64",
    "env": "msvc",
    "isX86": true,
    "isARM": false,
    "isRISCV": false,
    "is32Bit": false,
    "is64Bit": true,
    "isMacOS": false,
    "isiOS": false,
    "isDarwin": false,
    "isLinux": false,
    "isWindows": true,
    "normalized": "x86_64-pc-windows",
  },
  "x86_64-cygwin": {
    "os": "windows",
    "vendor": "pc",
    "arch": "x86_64",
    "env": "cygnus",
    "isX86": true,
    "isARM": false,
    "isRISCV": false,
    "is32Bit": false,
    "is64Bit": true,
    "isMacOS": false,
    "isiOS": false,
    "isDarwin": false,
    "isLinux": false,
    "isWindows": true,
    // Cygwin gets abbreviated in triples.
    "normalized": "x86_64-pc-cygwin",
  },
  "x86_64-pc-cygwin": {
    "os": "windows",
    "vendor": "pc",
    "arch": "x86_64",
    "env": "cygnus",
    "isX86": true,
    "isARM": false,
    "isRISCV": false,
    "is32Bit": false,
    "is64Bit": true,
    "isMacOS": false,
    "isiOS": false,
    "isDarwin": false,
    "isLinux": false,
    "isWindows": true,
    // Cygwin gets abbreviated in triples.
    "normalized": "x86_64-pc-cygwin",
  },
  "x86_64-mingw": {
    "os": "windows",
    "vendor": "pc",
    "arch": "x86_64",
    "env": "gnu",
    "isX86": true,
    "isARM": false,
    "isRISCV": false,
    "is32Bit": false,
    "is64Bit": true,
    "isMacOS": false,
    "isiOS": false,
    "isDarwin": false,
    "isLinux": false,
    "isWindows": true,
    // MinGW strangely does not get abbreviated in triples.
    "normalized": "x86_64-pc-windows-gnu",
  },
  "x86_64-pc-mingw": {
    "os": "windows",
    "vendor": "pc",
    "arch": "x86_64",
    "env": "gnu",
    "isX86": true,
    "isARM": false,
    "isRISCV": false,
    "is32Bit": false,
    "is64Bit": true,
    "isMacOS": false,
    "isiOS": false,
    "isDarwin": false,
    "isLinux": false,
    "isWindows": true,
    // MinGW strangely does not get abbreviated in triples.
    "normalized": "x86_64-pc-windows-gnu",
  },
  "x86_64-windows-unknown": {
    "os": "windows",
    "vendor": "pc",
    "arch": "x86_64",
    "env": "unknown",
    "isX86": true,
    "isARM": false,
    "isRISCV": false,
    "is32Bit": false,
    "is64Bit": true,
    "isMacOS": false,
    "isiOS": false,
    "isDarwin": false,
    "isLinux": false,
    "isWindows": true,
    // msvc is normally inferred, so we include the environment to dispel the inference.
    "normalized": "x86_64-pc-windows-unknown",
  },
  "aarch64-windows": {
    "os": "windows",
    "vendor": "pc",
    "arch": "aarch64",
    "env": "msvc",
    "isX86": false,
    "isARM": true,
    "isRISCV": false,
    "is32Bit": false,
    "is64Bit": true,
    "isMacOS": false,
    "isiOS": false,
    "isDarwin": false,
    "isLinux": false,
    "isWindows": true,
    "normalized": "aarch64-pc-windows",
  },
  "foo-bar": {
    // For completely unknown identifiers, they should parse in order of
    // arch, vendor, os, then env.
    "os": "bar",
    "vendor": "unknown",
    "arch": "foo",
    "env": "unknown",
    "isX86": false,
    "isARM": false,
    "isRISCV": false,
    "is32Bit": false,
    "is64Bit": false,
    "isMacOS": false,
    "isiOS": false,
    "isDarwin": false,
    "isLinux": false,
    "isWindows": false,
    // Other parsers may recognize foo and/or bar,
    // so we should try to indicate how we intend the triple.
    "normalized": "foo-unknown-bar",
  },
  "foo-bar-baz": {
    // For completely unknown identifiers, they should parse in order of
    // arch, vendor, os, then env.
    "os": "baz",
    "vendor": "bar",
    "arch": "foo",
    "env": "unknown",
    "isX86": false,
    "isARM": false,
    "isRISCV": false,
    "is32Bit": false,
    "is64Bit": false,
    "isMacOS": false,
    "isiOS": false,
    "isDarwin": false,
    "isLinux": false,
    "isWindows": false,
    // Other parsers may recognize foo, bar and/or baz,
    // so we should try to indicate how we intend the triple.
    "normalized": "foo-bar-baz",
  },
  "foo-bar-baz-quux": {
    // For completely unknown identifiers, they should parse in order of
    // arch, vendor, os, then env.
    "os": "baz",
    "vendor": "bar",
    "arch": "foo",
    "env": "quux",
    "isX86": false,
    "isARM": false,
    "isRISCV": false,
    "is32Bit": false,
    "is64Bit": false,
    "isMacOS": false,
    "isiOS": false,
    "isDarwin": false,
    "isLinux": false,
    "isWindows": false,
    // Other parsers may recognize foo, bar, baz and/or quux,
    // so we should try to indicate how we intend the triple.
    "normalized": "foo-bar-baz-quux",
  },
}
